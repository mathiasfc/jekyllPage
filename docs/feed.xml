<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="https://mathiasfc.github.io/jekyllPage//feed.xml" rel="self" type="application/atom+xml" /><link href="https://mathiasfc.github.io/jekyllPage//" rel="alternate" type="text/html" /><updated>2018-10-09T13:33:49-03:00</updated><id>https://mathiasfc.github.io/jekyllPage//</id><title type="html">Mathias Falci</title><subtitle>Frontend Developer</subtitle><entry><title type="html">Colisão entre dois elementos</title><link href="https://mathiasfc.github.io/jekyllPage//colisao-elementos/" rel="alternate" type="text/html" title="Colisão entre dois elementos" /><published>2017-06-12T00:00:00-03:00</published><updated>2017-06-12T00:00:00-03:00</updated><id>https://mathiasfc.github.io/jekyllPage//colisao-elementos</id><content type="html" xml:base="https://mathiasfc.github.io/jekyllPage//colisao-elementos/">&lt;p&gt;Para apresentar como funciona a detecção de colisão entre dois objetos em &lt;b&gt;javascript&lt;/b&gt; utilizando &lt;b&gt;jquery&lt;/b&gt;, vou utilizar duas div’s quadradas inseridas em um plano &lt;b&gt;2D&lt;/b&gt; (x,y), lembrando que  a detecção de colisão pode ser aplicada para qualquer forma de objeto, desde que tenhamos as dimensões dos objetos em questão e suas respectivas posições. Esse algoritmo serve também para planos em 3D (x,y,z), obviamente que a complexidade da detecção aumentará, mas o raciocínio permanece o mesmo.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;../assets/img/posts/img10.png&quot; /&gt;
&lt;/figure&gt;

&lt;p&gt;No exemplo em questão os dois objetos (div’s) vão possuir as seguintes dimensões, a primeira div (&lt;span style=&quot;color:blue&quot;&gt;azul&lt;/span&gt;) possui 100 pixels de altura e 100 pixels de largura, a segunda div (&lt;span style=&quot;color:red&quot;&gt;vermelha&lt;/span&gt;) possui a metade do tamanho da primeira, logo 50 pixels de altura e 50 pixels de largura.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;../assets/img/posts/img11.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;posicionamento&quot;&gt;Posicionamento&lt;/h2&gt;

&lt;p&gt;O próprio &lt;b&gt;jquery&lt;/b&gt; disponibiliza duas formas de obter a posição de um elemento:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://api.jquery.com/offset/&quot;&gt;Offset&lt;/a&gt;:
&lt;i&gt;Get the current coordinates of the first element in the set of matched elements, relative to the document.&lt;/i&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://api.jquery.com/position/&quot;&gt;Position&lt;/a&gt;:
&lt;i&gt;Get the current coordinates of the first element in the set of matched elements, relative to the offset parent.&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O &lt;code class=&quot;highlighter-rouge&quot;&gt;.offset()&lt;/code&gt; retorna a posição top e left do elemento em relação ao documento, diferentemente do &lt;code class=&quot;highlighter-rouge&quot;&gt;.position()&lt;/code&gt; que retorna as posições em relação ao ancestral mais próximo. Não explicarei a fundo os métodos visto que não é a intenção deste post, para entender mais sobre eles basta acessar esses link’s da própria documentação: &lt;a href=&quot;http://api.jquery.com/offset/&quot;&gt;offset&lt;/a&gt;, &lt;a href=&quot;https://api.jquery.com/position/&quot;&gt;position&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;colisão&quot;&gt;Colisão&lt;/h2&gt;

&lt;p&gt;A colisão nesse contexto que criamos, considerando somente estes dois elementos, vai acontecer quando as seguintes condições forem verdadeiras:&lt;/p&gt;

&lt;h3 id=&quot;na-horizontal&quot;&gt;Na horizontal:&lt;/h3&gt;

&lt;p&gt;Quando a extremidade direita do elemento mais a esquerda (&lt;span style=&quot;color:blue&quot;&gt;A2&lt;/span&gt;) for maior ou igual a extremidade esquerda do elemento mais a direita (&lt;span style=&quot;color:red&quot;&gt;V1&lt;/span&gt;) e menor ou igual a extremidade direita do elemento mais a direita (&lt;span style=&quot;color:red&quot;&gt;V2&lt;/span&gt;).&lt;/p&gt;

&lt;center&gt;&lt;span style=&quot;font-size:19px&quot;&gt;&lt;span style=&quot;color:red&quot;&gt;V1&lt;/span&gt;&amp;lt;=&lt;span style=&quot;color:blue&quot;&gt;A2&lt;/span&gt;&amp;lt;=&lt;span style=&quot;color:red&quot;&gt;V2&lt;/span&gt;&lt;/span&gt;&lt;/center&gt;

&lt;p&gt;TODO….&lt;/p&gt;</content><author><name></name></author><category term="javascript" /><category term="jquery" /><category term="html" /><summary type="html">Mini-tutorial de como detectar uma colisão entre dois elementos utilizando a linguagem JavaScript</summary></entry><entry><title type="html">Pong Game</title><link href="https://mathiasfc.github.io/jekyllPage//game-pong/" rel="alternate" type="text/html" title="Pong Game" /><published>2016-11-28T00:00:00-02:00</published><updated>2016-11-28T00:00:00-02:00</updated><id>https://mathiasfc.github.io/jekyllPage//game-pong</id><content type="html" xml:base="https://mathiasfc.github.io/jekyllPage//game-pong/">&lt;h2 id=&quot;introdução&quot;&gt;Introdução&lt;/h2&gt;

&lt;p&gt;Game desenvolvido para a disciplina de Computação Gráfica I, ministrada pela Prof. Dr. Soraia Raupp. A proposta inicial foi um jogo no estilo “pong”, onde o principal objetivo é não deixar bola sair do campo, quanto mais tempo o jogador permanecesse com a bola em campo, a dificuldade do game aumenta proporcionalmente.&lt;/p&gt;

&lt;h2 id=&quot;funcionamento&quot;&gt;Funcionamento&lt;/h2&gt;

&lt;p&gt;A mecânica do jogo é bem simples, com as teclas direcionais o player controla as paredes cujo objetivo é não deixar o alvo (bola) sair do campo. Cada vez que a bola ultrapassa o limite do campo, o player perde uma vida.
Foram gerados 90 frames, totalizando 3 segundos de filme.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;../assets/img/posts/img9.png&quot; /&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;problemas-encontrados&quot;&gt;Problemas encontrados&lt;/h2&gt;

&lt;p&gt;O principal problema encontrado no desenvolvimento do game foi o tempo de resposta para a ação da tecla pressionada, que compromete muito a jogabilidade, por isso o jogo encontra-se em versão BETA, outro grande problema foi o uso das texturas, eu particularmente tive bastante dificuldade em acoplar uma textura a algum objeto 3D do game.&lt;/p&gt;

&lt;h2 id=&quot;conclusão&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Através do desenvolvimento, deu para adquirir noções básicas na API &lt;a href=&quot;https://www.opengl.org/&quot;&gt;OpenGL&lt;/a&gt; e na biblioteca &lt;a href=&quot;https://www.opengl.org/resources/libraries/glut/&quot;&gt;GLUT&lt;/a&gt;. O executável pode ser encontrado no seguinte &lt;a href=&quot;https://drive.google.com/open?id=0B8sCkbWAECcZN2pHRUMtSkg3MXM&quot;&gt;link&lt;/a&gt;, juntamente com o código fonte do game.&lt;/p&gt;</content><author><name></name></author><category term="c++" /><category term="computação gráfica" /><category term="graduação" /><summary type="html">Game no estilo pong desenvolvido em C++</summary></entry><entry><title type="html">Animação POV-Ray</title><link href="https://mathiasfc.github.io/jekyllPage//animacao-povray/" rel="alternate" type="text/html" title="Animação POV-Ray" /><published>2016-09-14T00:00:00-03:00</published><updated>2016-09-14T00:00:00-03:00</updated><id>https://mathiasfc.github.io/jekyllPage//animacao-povray</id><content type="html" xml:base="https://mathiasfc.github.io/jekyllPage//animacao-povray/">&lt;p&gt;Este projeto foi gerado a partir da ferramenta &lt;a href=&quot;https://en.wikipedia.org/wiki/POV-Ray&quot;&gt;POV-ray&lt;/a&gt;, versão 3.6/3.7. 
Consiste em um filme de três segundos que possui três objetos diferentes, tanto a câmera quanto os objetos se movimentam a cada frame.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;../assets/img/posts/gif1.gif&quot;&gt;&lt;img src=&quot;../assets/img/posts/gif1.gif&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p class=&quot;notice&quot;&gt;Foram gerados 90 frames, totalizando 3 segundos de filme.&lt;/p&gt;

&lt;p&gt;Para fazer a movimentação de cada objeto foi adicionada a variável &lt;code class=&quot;highlighter-rouge&quot;&gt;clock&lt;/code&gt; na função de translação do objeto. Cada um dos balões possui uma velocidade diferente. Para simular a rotação da câmera foi adicionada a mesma variável na função de localização.&lt;/p&gt;

&lt;p&gt;Segue um snippet de como ficou o arquivo de configuração:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Antialias&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Off&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Antialias_Threshold&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Antialias_Depth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Input_File_Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;skyscene.pov&quot;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Initial_Frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Final_Frame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Initial_Clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Final_Clock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Cyclic_Animation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Pause_when_Done&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;off&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Todo o código que gera os frames pode ser encontrado &lt;a href=&quot;https://drive.google.com/open?id=0B8sCkbWAECcZdkdfbzBNdXpzaGc&quot;&gt;aqui&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="c#" /><category term="computação gráfica" /><category term="graduação" /><summary type="html">Animação feita no programa POV-Ray</summary></entry><entry><title type="html">Projeto de Análise</title><link href="https://mathiasfc.github.io/jekyllPage//projeto-analise/" rel="alternate" type="text/html" title="Projeto de Análise" /><published>2016-09-13T00:00:00-03:00</published><updated>2016-09-13T00:00:00-03:00</updated><id>https://mathiasfc.github.io/jekyllPage//projeto-analise</id><content type="html" xml:base="https://mathiasfc.github.io/jekyllPage//projeto-analise/">&lt;p&gt;A análise será feita através de dados contidos em um arquivo chamado “Paths_D”, este arquivo contém as coordenadas em pixels de cada pessoa parada ou em movimento que aparecem nos frames.&lt;/p&gt;

&lt;p&gt;O projeto em questão analisa três eventos no vídeo, o primeiro aspecto analisado são as áreas mais utilizadas pelas pessoas em cada frame, resultando em um esboço dos locais mais utilizados no cenário. O segundo aspecto analisado é a formação de grupos entre essas pessoas, a definição de formação de grupo consiste em pessoas que estão próximas o suficientes para interagir. O terceiro dado levantado é a distância, tanto em pixels quanto em metros que cada pessoa percorreu durante o decorrer de todos os frames.&lt;/p&gt;

&lt;h2 id=&quot;como-utilizar-a-ferramenta&quot;&gt;Como utilizar a ferramenta?&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Selecione o tipo de evento a ser analisado.&lt;/p&gt;

    &lt;figure&gt;
	&lt;img src=&quot;../assets/img/posts/img1.png&quot; /&gt;
&lt;/figure&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Selecione o arquivo .txt a ser interpretado pelo programa.&lt;/p&gt;

    &lt;figure&gt;
	&lt;img src=&quot;../assets/img/posts/img2.png&quot; /&gt;
&lt;/figure&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Após informar estes dois parâmetros os dados serão gerados automaticamente.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;resultados&quot;&gt;Resultados:&lt;/h4&gt;

&lt;p&gt;Abaixo serão listados os resultados da análise dos arquivos txt(Paths_D) na seguinte ordem,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Paths_D.txt - BR.&lt;/li&gt;
  &lt;li&gt;Paths_D.txt - DE1.&lt;/li&gt;
  &lt;li&gt;Paths_D.txt - JP1.&lt;/li&gt;
  &lt;li&gt;Paths_D.txt - UK1.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;áreas-mais-utilizadas-pelas-pessoas-nos-frames&quot;&gt;Áreas mais utilizadas pelas pessoas nos frames.&lt;/h2&gt;

&lt;p class=&quot;notice&quot;&gt;Coordenadas  BR&lt;/p&gt;
&lt;figure&gt;
&lt;a href=&quot;../assets/img/posts/img3.png&quot; title=&quot;Coordenadas  BR&quot;&gt;&lt;img src=&quot;../assets/img/posts/img3.png&quot; /&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;p class=&quot;notice&quot;&gt;Coordenadas DE1&lt;/p&gt;
&lt;figure&gt;
&lt;a href=&quot;../assets/img/posts/img4.png&quot; title=&quot;Coordenadas  DE1&quot;&gt;&lt;img src=&quot;../assets/img/posts/img4.png&quot; /&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;p class=&quot;notice&quot;&gt;Coordenadas JP1&lt;/p&gt;
&lt;figure&gt;
&lt;a href=&quot;../assets/img/posts/img5.png&quot; title=&quot;Coordenadas  JP1&quot;&gt;&lt;img src=&quot;../assets/img/posts/img5.png&quot; /&gt;&lt;/a&gt;
&lt;/figure&gt;
&lt;p class=&quot;notice&quot;&gt;Coordenadas UK1&lt;/p&gt;
&lt;figure&gt;
&lt;a href=&quot;../assets/img/posts/img6.png&quot; title=&quot;Coordenadas  UK1&quot;&gt;&lt;img src=&quot;../assets/img/posts/img6.png&quot; /&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;formação-de-grupos&quot;&gt;Formação de Grupos.&lt;/h2&gt;

&lt;p class=&quot;notice&quot;&gt;Formação de Grupos, Paths_D.txt DE&lt;/p&gt;
&lt;figure&gt;
    &lt;a href=&quot;../assets/img/posts/img7.png&quot; title=&quot;Formação de Grupos, Paths_D.txt DE&quot;&gt;&lt;img src=&quot;../assets/img/posts/img7.png&quot; /&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;distância&quot;&gt;Distância.&lt;/h2&gt;

&lt;p class=&quot;notice&quot;&gt;Distância percorrida, Paths_D.txt DE&lt;/p&gt;
&lt;figure&gt;
    &lt;a href=&quot;../assets/img/posts/img8.png&quot; title=&quot;Distância percorrida, Paths_D.txt DE&quot;&gt;&lt;img src=&quot;../assets/img/posts/img8.png&quot; /&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;conclusão&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;Os três aspectos analisados podem ser usados das mais variadas formas, para extrair dados de diversos eventos cotidianos. Um exemplo seria utilizar o algoritmo de áreas mais utilizadas para detectar por exemplo onde o maior fluxo de pessoas se concentra, este dado por ser útil nos mais diversos projetos na área da arquitetura.&lt;/p&gt;

&lt;h3 id=&quot;links&quot;&gt;Link’s&lt;/h3&gt;

&lt;p&gt;Download do projeto com o código: &lt;a href=&quot;https://drive.google.com/open?id=0B8sCkbWAECcZOG9kZVRwX2VFaTg&quot;&gt;Aqui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Download da aplicação com as coordenadas: &lt;a href=&quot;https://drive.google.com/drive/u/1/folders/0B8sCkbWAECcZUDExeUdiY0x5anc&quot;&gt;Aqui&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="c#" /><category term="computação gráfica" /><category term="graduação" /><summary type="html">Este projeto visa analisar pelo menos 4 vídeos, onde pessoas se movimentam livremente, o resultado da análise aponta áreas mais movimentadas, formação de grupos e outros comportamentos</summary></entry></feed>